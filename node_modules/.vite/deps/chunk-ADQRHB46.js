import {
  VSlideGroup,
  makeVSlideGroupProps
} from "./chunk-S3KKF5LV.js";
import {
  makeGroupProps,
  useGroup
} from "./chunk-P7TG4TGW.js";
import {
  makeVariantProps
} from "./chunk-44ORPR7P.js";
import {
  makeTagProps
} from "./chunk-NBXSRJBI.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-O3YYEVQH.js";
import {
  deepEqual,
  genericComponent,
  makeComponentProps,
  propsFactory,
  provideDefaults,
  useRender
} from "./chunk-WMPPK7XI.js";
import {
  createVNode,
  mergeProps,
  toRef
} from "./chunk-SPEYEUHE.js";

// node_modules/vuetify/lib/components/VChipGroup/VChipGroup.mjs
import "C:/Users/qazwe/OneDrive/桌面/test/node_modules/vuetify/lib/components/VChipGroup/VChipGroup.css";
var VChipGroupSymbol = Symbol.for("vuetify:v-chip-group");
var makeVChipGroupProps = propsFactory({
  column: Boolean,
  filter: Boolean,
  valueComparator: {
    type: Function,
    default: deepEqual
  },
  ...makeVSlideGroupProps(),
  ...makeComponentProps(),
  ...makeGroupProps({
    selectedClass: "v-chip--selected"
  }),
  ...makeTagProps(),
  ...makeThemeProps(),
  ...makeVariantProps({
    variant: "tonal"
  })
}, "VChipGroup");
var VChipGroup = genericComponent()({
  name: "VChipGroup",
  props: makeVChipGroupProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      isSelected,
      select,
      next,
      prev,
      selected
    } = useGroup(props, VChipGroupSymbol);
    provideDefaults({
      VChip: {
        color: toRef(props, "color"),
        disabled: toRef(props, "disabled"),
        filter: toRef(props, "filter"),
        variant: toRef(props, "variant")
      }
    });
    useRender(() => {
      const slideGroupProps = VSlideGroup.filterProps(props);
      return createVNode(VSlideGroup, mergeProps(slideGroupProps, {
        "class": ["v-chip-group", {
          "v-chip-group--column": props.column
        }, themeClasses.value, props.class],
        "style": props.style
      }), {
        default: () => {
          var _a;
          return [(_a = slots.default) == null ? void 0 : _a.call(slots, {
            isSelected,
            select,
            next,
            prev,
            selected: selected.value
          })];
        }
      });
    });
    return {};
  }
});

export {
  VChipGroupSymbol,
  VChipGroup
};
//# sourceMappingURL=chunk-ADQRHB46.js.map
