{
  "version": 3,
  "sources": ["../../gpt-to-chatgpt/build/index.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.get_message = exports.toChatML = exports.roleToStr = exports.Role = void 0;\nvar Role;\n(function (Role) {\n    Role[Role[\"SYSTEM\"] = 0] = \"SYSTEM\";\n    Role[Role[\"USER\"] = 1] = \"USER\";\n    Role[Role[\"ASSISTANT\"] = 2] = \"ASSISTANT\";\n})(Role = exports.Role || (exports.Role = {}));\nfunction strToRole(role) {\n    switch (role) {\n        case \"system\":\n            return Role.SYSTEM;\n        case \"user\":\n            return Role.USER;\n        case \"assistant\":\n            return Role.ASSISTANT;\n        default:\n            throw new Error(\"Invalid role\");\n    }\n}\nfunction roleToStr(role) {\n    switch (role) {\n        case Role.SYSTEM:\n            return \"system\";\n        case Role.USER:\n            return \"user\";\n        case Role.ASSISTANT:\n            return \"assistant\";\n        default:\n            throw new Error(\"Invalid role\");\n    }\n}\nexports.roleToStr = roleToStr;\nfunction toChatML(original, options = {}) {\n    const messages = [];\n    if (options.system_messages !== undefined) {\n        messages.push(...options.system_messages.map((msg) => ({ role: roleToStr(Role.SYSTEM), content: msg })));\n    }\n    const role = options.role !== undefined ? roleToStr(options.role) : roleToStr(Role.USER);\n    messages.push({ role, content: original });\n    return messages;\n}\nexports.toChatML = toChatML;\nfunction get_message(response, options = {}) {\n    const response_dict = {};\n    if (options.usage === true) {\n        response_dict.usage = response.usage;\n    }\n    if (options.isMessages === true) {\n        response_dict.messages = response.choices.map((choice) => choice.message.content);\n        if (options.role === true) {\n            response_dict.roles = response.choices.map((choice) => choice.message.role);\n        }\n    }\n    // if response_dict is not empty\n    if (Object.keys(response_dict).length !== 0) {\n        if (!options.isMessages || (options.isMessages && !options.isMessages)) {\n            response_dict.message = response.choices[0].message.content;\n            if (options.role === true) {\n                response_dict.role = response.choices[0].message.role;\n            }\n        }\n        return response_dict;\n    }\n    // base case just return the message\n    return response.choices[0].message.content;\n}\nexports.get_message = get_message;\n"],
  "mappings": ";;;;;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,cAAc,QAAQ,WAAW,QAAQ,YAAY,QAAQ,OAAO;AAC5E,QAAI;AACJ,KAAC,SAAUA,OAAM;AACb,MAAAA,MAAKA,MAAK,QAAQ,IAAI,CAAC,IAAI;AAC3B,MAAAA,MAAKA,MAAK,MAAM,IAAI,CAAC,IAAI;AACzB,MAAAA,MAAKA,MAAK,WAAW,IAAI,CAAC,IAAI;AAAA,IAClC,GAAG,OAAO,QAAQ,SAAS,QAAQ,OAAO,CAAC,EAAE;AAa7C,aAAS,UAAU,MAAM;AACrB,cAAQ,MAAM;AAAA,QACV,KAAK,KAAK;AACN,iBAAO;AAAA,QACX,KAAK,KAAK;AACN,iBAAO;AAAA,QACX,KAAK,KAAK;AACN,iBAAO;AAAA,QACX;AACI,gBAAM,IAAI,MAAM,cAAc;AAAA,MACtC;AAAA,IACJ;AACA,YAAQ,YAAY;AACpB,aAAS,SAAS,UAAU,UAAU,CAAC,GAAG;AACtC,YAAM,WAAW,CAAC;AAClB,UAAI,QAAQ,oBAAoB,QAAW;AACvC,iBAAS,KAAK,GAAG,QAAQ,gBAAgB,IAAI,CAAC,SAAS,EAAE,MAAM,UAAU,KAAK,MAAM,GAAG,SAAS,IAAI,EAAE,CAAC;AAAA,MAC3G;AACA,YAAM,OAAO,QAAQ,SAAS,SAAY,UAAU,QAAQ,IAAI,IAAI,UAAU,KAAK,IAAI;AACvF,eAAS,KAAK,EAAE,MAAM,SAAS,SAAS,CAAC;AACzC,aAAO;AAAA,IACX;AACA,YAAQ,WAAW;AACnB,aAAS,YAAY,UAAU,UAAU,CAAC,GAAG;AACzC,YAAM,gBAAgB,CAAC;AACvB,UAAI,QAAQ,UAAU,MAAM;AACxB,sBAAc,QAAQ,SAAS;AAAA,MACnC;AACA,UAAI,QAAQ,eAAe,MAAM;AAC7B,sBAAc,WAAW,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,QAAQ,OAAO;AAChF,YAAI,QAAQ,SAAS,MAAM;AACvB,wBAAc,QAAQ,SAAS,QAAQ,IAAI,CAAC,WAAW,OAAO,QAAQ,IAAI;AAAA,QAC9E;AAAA,MACJ;AAEA,UAAI,OAAO,KAAK,aAAa,EAAE,WAAW,GAAG;AACzC,YAAI,CAAC,QAAQ,cAAe,QAAQ,cAAc,CAAC,QAAQ,YAAa;AACpE,wBAAc,UAAU,SAAS,QAAQ,CAAC,EAAE,QAAQ;AACpD,cAAI,QAAQ,SAAS,MAAM;AACvB,0BAAc,OAAO,SAAS,QAAQ,CAAC,EAAE,QAAQ;AAAA,UACrD;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAEA,aAAO,SAAS,QAAQ,CAAC,EAAE,QAAQ;AAAA,IACvC;AACA,YAAQ,cAAc;AAAA;AAAA;",
  "names": ["Role"]
}
